Dispatch_ID,Kernel_Name,GPU_ID,queue-id,queue-index,pid,tid,Grid_Size,Workgroup_Size,LDS_Per_Workgroup,Scratch_Per_Workitem,Arch_VGPR,Accum_VGPR,SGPR,wave_size,sig,obj,SQ_INSTS_SMEM,SQ_INST_LEVEL_SMEM,SQ_ACCUM_PREV_HIRES,SQ_INSTS,SQ_INSTS_VALU,SQ_INSTS_VALU_ADD_F16,SQ_INSTS_VALU_MUL_F16,SQ_INSTS_VALU_FMA_F16,TA_BUFFER_READ_WAVEFRONTS_sum,TA_BUFFER_WRITE_WAVEFRONTS_sum,TD_SPI_STALL_sum,TD_LOAD_WAVEFRONT_sum,TCP_READ_TAGCONFLICT_STALL_CYCLES_sum,TCP_WRITE_TAGCONFLICT_STALL_CYCLES_sum,TCP_ATOMIC_TAGCONFLICT_STALL_CYCLES_sum,TCP_TA_TCP_STATE_READ_sum,TCC_REQ[0],TCC_READ[0],TCC_WRITE[0],TCC_ATOMIC[0],TCC_REQ[1],TCC_READ[1],TCC_WRITE[1],TCC_ATOMIC[1],TCC_REQ[2],TCC_READ[2],TCC_WRITE[2],TCC_ATOMIC[2],TCC_REQ[3],TCC_READ[3],TCC_WRITE[3],TCC_ATOMIC[3],TCC_REQ[4],TCC_READ[4],TCC_WRITE[4],TCC_ATOMIC[4],TCC_REQ[5],TCC_READ[5],TCC_WRITE[5],TCC_ATOMIC[5],TCC_REQ[6],TCC_READ[6],TCC_WRITE[6],TCC_ATOMIC[6],TCC_REQ[7],TCC_READ[7],TCC_WRITE[7],TCC_ATOMIC[7],TCC_REQ[8],TCC_READ[8],TCC_WRITE[8],TCC_ATOMIC[8],TCC_REQ[9],TCC_READ[9],TCC_WRITE[9],TCC_ATOMIC[9],TCC_REQ[10],TCC_READ[10],TCC_WRITE[10],TCC_ATOMIC[10],TCC_REQ[11],TCC_READ[11],TCC_WRITE[11],TCC_ATOMIC[11],TCC_REQ[12],TCC_READ[12],TCC_WRITE[12],TCC_ATOMIC[12],TCC_REQ[13],TCC_READ[13],TCC_WRITE[13],TCC_ATOMIC[13],TCC_REQ[14],TCC_READ[14],TCC_WRITE[14],TCC_ATOMIC[14],TCC_REQ[15],TCC_READ[15],TCC_WRITE[15],TCC_ATOMIC[15],CPC_CPC_TCIU_BUSY,CPC_CPC_TCIU_IDLE,CPF_CPF_TCIU_BUSY,CPF_CPF_TCIU_STALL,SPI_CSN_NUM_THREADGROUPS,SPI_CSN_WAVE,DispatchNs,Start_Timestamp,End_Timestamp,CompleteNs
0,"void at::native::(anonymous namespace)::distribution_elementwise_grid_stride_kernel<float, 4, at::native::templates::cuda::normal_and_transform<c10::BFloat16, float, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1})::{lambda(hiprandStatePhilox4_32_10*)#2}, at::native::(anonymous namespace)::distribution_nullary_kernel<c10::BFloat16, float, HIP_vector_type<float, 4u>, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_and_transform<c10::BFloat16, float, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1})::{lambda(hiprandStatePhilox4_32_10*)#2}, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_and_transform<c10::BFloat16, float, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1})::{lambda(hiprandStatePhilox4_32_10*)#2} const&, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1})::{lambda(int, float)#1}>(long, at::PhiloxCudaState, at::native::templates::cuda::normal_and_transform<c10::BFloat16, float, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1})::{lambda(hiprandStatePhilox4_32_10*)#2}, at::native::(anonymous namespace)::distribution_nullary_kernel<c10::BFloat16, float, HIP_vector_type<float, 4u>, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_and_transform<c10::BFloat16, float, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1})::{lambda(hiprandStatePhilox4_32_10*)#2}, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_and_transform<c10::BFloat16, float, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1})::{lambda(hiprandStatePhilox4_32_10*)#2} const&, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1})::{lambda(int, float)#1}) [clone .kd]",2,0,0,1928,1928,622592,256,0,0,56,0,48,64,0x0,0x71692904bf80,68096,359888,28832104,68765696,54870528,0,0,0,0.0,0.0,0.0,1048576.0,0.0,0.0,0.0,1048576.0,131717,645,131072,0,131720,648,131072,0,131728,656,131072,0,131735,663,131072,0,131872,800,131072,0,131392,320,131072,0,131720,648,131072,0,131712,640,131072,0,131719,647,131072,0,131720,648,131072,0,131728,656,131072,0,131733,661,131072,0,131872,800,131072,0,131392,320,131072,0,131720,648,131072,0,131712,640,131072,0,3138,1417624,35659,0,2432,9728,2071942319448080,2072010192658723,2072010192746893,2071942329075817
1,"void at::native::vectorized_elementwise_kernel<8, at::native::BUnaryFunctor<c10::BFloat16, c10::BFloat16, c10::BFloat16, at::native::binary_internal::MulFunctor<float> >, std::array<char*, 2ul> >(int, at::native::BUnaryFunctor<c10::BFloat16, c10::BFloat16, c10::BFloat16, at::native::binary_internal::MulFunctor<float> >, std::array<char*, 2ul>) [clone .kd]",2,0,1,1928,1928,8388608,256,0,0,20,4,32,64,0x0,0x712905046d40,393216,525706,42268632,10747904,7602176,0,0,0,0.0,0.0,2044.0,262144.0,0.0,0.0,0.0,262144.0,197259,66187,131072,0,197248,66176,131072,0,197285,66213,131072,0,197036,65964,131072,0,196612,65540,131072,0,197025,65953,131072,0,196928,65856,131072,0,196928,65856,131072,0,197256,66184,131072,0,197248,66176,131072,0,197284,66212,131072,0,197039,65967,131072,0,196612,65540,131072,0,197030,65958,131072,0,196928,65856,131072,0,196928,65856,131072,0,1185,1520977,18318,0,32768,131072,2071942334029211,2072010198264591,2072010198356086,2071942334694996
2,"void at::native::(anonymous namespace)::distribution_elementwise_grid_stride_kernel<float, 4, at::native::templates::cuda::normal_and_transform<c10::BFloat16, float, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1})::{lambda(hiprandStatePhilox4_32_10*)#2}, at::native::(anonymous namespace)::distribution_nullary_kernel<c10::BFloat16, float, HIP_vector_type<float, 4u>, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_and_transform<c10::BFloat16, float, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1})::{lambda(hiprandStatePhilox4_32_10*)#2}, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_and_transform<c10::BFloat16, float, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1})::{lambda(hiprandStatePhilox4_32_10*)#2} const&, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1})::{lambda(int, float)#1}>(long, at::PhiloxCudaState, at::native::templates::cuda::normal_and_transform<c10::BFloat16, float, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1})::{lambda(hiprandStatePhilox4_32_10*)#2}, at::native::(anonymous namespace)::distribution_nullary_kernel<c10::BFloat16, float, HIP_vector_type<float, 4u>, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_and_transform<c10::BFloat16, float, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1})::{lambda(hiprandStatePhilox4_32_10*)#2}, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_and_transform<c10::BFloat16, float, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::CUDAGeneratorImpl*, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1})::{lambda(hiprandStatePhilox4_32_10*)#2} const&, at::native::templates::cuda::normal_kernel<at::CUDAGeneratorImpl*>(at::TensorBase const&, double, double, at::CUDAGeneratorImpl*)::{lambda()#1}::operator()() const::{lambda()#4}::operator()() const::{lambda(float)#1})::{lambda(int, float)#1}) [clone .kd]",2,0,2,1928,1928,622592,256,0,0,56,0,48,64,0x0,0x71692904bf80,68096,341164,27128208,68765696,54870528,0,0,0,0.0,0.0,0.0,1048576.0,0.0,0.0,0.0,1048576.0,131712,640,131072,0,131721,649,131072,0,131714,642,131072,0,131712,640,131072,0,131713,641,131072,0,131392,320,131072,0,131880,808,131072,0,131712,640,131072,0,131713,641,131072,0,131721,649,131072,0,131712,640,131072,0,131713,641,131072,0,131712,640,131072,0,131393,321,131072,0,131883,811,131072,0,131712,640,131072,0,3185,1419907,41302,0,2432,9728,2071942334708936,2072010198356086,2072010198442294,2071942335679562
3,"void at::native::vectorized_elementwise_kernel<8, at::native::BUnaryFunctor<c10::BFloat16, c10::BFloat16, c10::BFloat16, at::native::binary_internal::MulFunctor<float> >, std::array<char*, 2ul> >(int, at::native::BUnaryFunctor<c10::BFloat16, c10::BFloat16, c10::BFloat16, at::native::binary_internal::MulFunctor<float> >, std::array<char*, 2ul>) [clone .kd]",2,0,3,1928,1928,8388608,256,0,0,20,4,32,64,0x0,0x712905046d40,393216,592434,47488896,10747904,7602176,0,0,0,0.0,0.0,1983.0,262144.0,0.0,0.0,0.0,262144.0,197258,66186,131072,0,197252,66180,131072,0,197261,66189,131072,0,197034,65962,131072,0,196635,65563,131072,0,196940,65868,131072,0,196932,65860,131072,0,197081,66009,131072,0,197264,66192,131072,0,197253,66181,131072,0,197263,66191,131072,0,197035,65963,131072,0,196641,65569,131072,0,196936,65864,131072,0,196934,65862,131072,0,197062,65990,131072,0,1277,1514804,116650,0,32768,131072,2071942335289765,2072010198442294,2072010198529342,2071942336556428
4,__amd_rocclr_fillBufferAligned.kd,2,0,4,1928,1928,77824,256,0,0,12,4,48,64,0x0,0x71612802ba00,28032,59036,4756200,645952,140160,0,0,0,0.0,0.0,0.0,25600.0,0.0,0.0,0.0,25600.0,26000,400,25600,0,25840,240,25600,0,26240,640,25600,0,26240,640,25600,0,25920,320,25600,0,25920,320,25600,0,25612,12,25600,0,25693,93,25600,0,26000,400,25600,0,25840,240,25600,0,26240,640,25600,0,26240,640,25600,0,25920,320,25600,0,25920,320,25600,0,25612,12,25600,0,25693,93,25600,0,1394,275738,22277,0,304,1216,2071942336611770,2072010198586066,2072010198596962,2071942337529086
5,Cijk_Ailk_Bljk_BBS_BH_UserArgs_MT256x224x64_MI16x16x1_SN_LDSB1_AFC0_AFEM8_AFEM8_ASEM32_CLR1_CADS0_DTVA0_DTVB0_EPS0_FDSI0_GRPM1_GRVWA8_GRVWB4_GSUAMB_GLS0_ISA942_IU1_K1_LBSPPA2048_LBSPPB128_LBSPPM0_LPA16_LPB4_LPM0_LRVW4_LWPMn1_MIAV0_MIWT4_14_MO40_NTn1_NTA0_NTB0_NTC0_NTD0_NTM0_NEPBS0_NLCA1_NLCB1_ONLL1_PGR2_PLR1_PKA1_SIA3_SS1_SPO0_SRVW0_SSO0_SVW4_SK0_SKXCCM0_TLDS1_ULSGRO0_USL1_UIOFGRO0_USFGROn1_VSn1_VWA4_VWB1_WSGRA1_WSGRB2_WS64_WG64_4_1.kd,2,0,5,1928,1928,303104,256,64000,0,128,352,112,64,0x0,0x7128dc017980,18944,58083,4614076,267647104,163333632,0,0,0,13336576.0,265216.0,0.0,13601792.0,0.0,0.0,0.0,13601792.0,4658308,4527236,131072,0,4658288,4527216,131072,0,4658432,4527360,131072,0,4658266,4527194,131072,0,4658136,4527064,131072,0,4658113,4527041,131072,0,4658272,4527200,131072,0,4658282,4527210,131072,0,4658309,4527237,131072,0,4658288,4527216,131072,0,4658431,4527359,131072,0,4658268,4527196,131072,0,4658136,4527064,131072,0,4658113,4527041,131072,0,4658272,4527200,131072,0,4658281,4527209,131072,0,1393,16966328,55878,0,1184,4736,2071942428015038,2072010287445179,2072010288682128,2071942430111077
6,Cijk_Ailk_Bljk_BBS_BH_UserArgs_MT256x224x64_MI16x16x1_SN_LDSB1_AFC0_AFEM8_AFEM8_ASEM32_CLR1_CADS0_DTVA0_DTVB0_EPS0_FDSI0_GRPM1_GRVWA8_GRVWB4_GSUAMB_GLS0_ISA942_IU1_K1_LBSPPA2048_LBSPPB128_LBSPPM0_LPA16_LPB4_LPM0_LRVW4_LWPMn1_MIAV0_MIWT4_14_MO40_NTn1_NTA0_NTB0_NTC0_NTD0_NTM0_NEPBS0_NLCA1_NLCB1_ONLL1_PGR2_PLR1_PKA1_SIA3_SS1_SPO0_SRVW0_SSO0_SVW4_SK0_SKXCCM0_TLDS1_ULSGRO0_USL1_UIOFGRO0_USFGROn1_VSn1_VWA4_VWB1_WSGRA1_WSGRB2_WS64_WG64_4_1.kd,2,0,6,1928,1928,303104,256,64000,0,128,352,112,64,0x0,0x7128dc017980,18944,104734,8444916,267647104,163333632,0,0,0,13336576.0,265216.0,0.0,13601792.0,0.0,0.0,0.0,13601792.0,4658304,4527232,131072,0,4658288,4527216,131072,0,4658267,4527195,131072,0,4658566,4527494,131072,0,4658193,4527121,131072,0,4658154,4527082,131072,0,4658278,4527206,131072,0,4658311,4527239,131072,0,4658305,4527233,131072,0,4658289,4527217,131072,0,4658267,4527195,131072,0,4658565,4527493,131072,0,4658188,4527116,131072,0,4658153,4527081,131072,0,4658280,4527208,131072,0,4658313,4527241,131072,0,1986,17318497,218298,0,1184,4736,2071942428960506,2072010288682128,2072010290202575,2071942432362056
7,Cijk_Ailk_Bljk_BBS_BH_UserArgs_MT256x224x64_MI16x16x1_SN_LDSB1_AFC0_AFEM8_AFEM8_ASEM32_CLR1_CADS0_DTVA0_DTVB0_EPS0_FDSI0_GRPM1_GRVWA8_GRVWB4_GSUAMB_GLS0_ISA942_IU1_K1_LBSPPA2048_LBSPPB128_LBSPPM0_LPA16_LPB4_LPM0_LRVW4_LWPMn1_MIAV0_MIWT4_14_MO40_NTn1_NTA0_NTB0_NTC0_NTD0_NTM0_NEPBS0_NLCA1_NLCB1_ONLL1_PGR2_PLR1_PKA1_SIA3_SS1_SPO0_SRVW0_SSO0_SVW4_SK0_SKXCCM0_TLDS1_ULSGRO0_USL1_UIOFGRO0_USFGROn1_VSn1_VWA4_VWB1_WSGRA1_WSGRB2_WS64_WG64_4_1.kd,2,0,7,1928,1928,303104,256,64000,0,128,352,112,64,0x0,0x7128dc017980,18944,99300,7969696,267647104,163333632,0,0,0,13336576.0,265216.0,0.0,13601792.0,0.0,0.0,0.0,13601792.0,4658313,4527241,131072,0,4658288,4527216,131072,0,4658274,4527202,131072,0,4658589,4527517,131072,0,4658166,4527094,131072,0,4658150,4527078,131072,0,4658272,4527200,131072,0,4658300,4527228,131072,0,4658315,4527243,131072,0,4658289,4527217,131072,0,4658275,4527203,131072,0,4658586,4527514,131072,0,4658160,4527088,131072,0,4658159,4527087,131072,0,4658274,4527202,131072,0,4658297,4527225,131072,0,1778,16917697,198009,0,1184,4736,2071942429531260,2072010290202575,2072010292304603,2071942434621517
8,Cijk_Ailk_Bljk_BBS_BH_UserArgs_MT256x224x64_MI16x16x1_SN_LDSB1_AFC0_AFEM8_AFEM8_ASEM32_CLR1_CADS0_DTVA0_DTVB0_EPS0_FDSI0_GRPM1_GRVWA8_GRVWB4_GSUAMB_GLS0_ISA942_IU1_K1_LBSPPA2048_LBSPPB128_LBSPPM0_LPA16_LPB4_LPM0_LRVW4_LWPMn1_MIAV0_MIWT4_14_MO40_NTn1_NTA0_NTB0_NTC0_NTD0_NTM0_NEPBS0_NLCA1_NLCB1_ONLL1_PGR2_PLR1_PKA1_SIA3_SS1_SPO0_SRVW0_SSO0_SVW4_SK0_SKXCCM0_TLDS1_ULSGRO0_USL1_UIOFGRO0_USFGROn1_VSn1_VWA4_VWB1_WSGRA1_WSGRB2_WS64_WG64_4_1.kd,2,0,10,1928,1928,303104,256,64000,0,128,352,112,64,0x0,0x7128dc017980,18944,52074,4189492,267647104,163333632,0,0,0,13336576.0,265216.0,0.0,13601792.0,0.0,0.0,0.0,13601792.0,4658464,4527392,131072,0,4658288,4527216,131072,0,4658259,4527187,131072,0,4658245,4527173,131072,0,4658163,4527091,131072,0,4658117,4527045,131072,0,4658277,4527205,131072,0,4658302,4527230,131072,0,4658464,4527392,131072,0,4658289,4527217,131072,0,4658259,4527187,131072,0,4658245,4527173,131072,0,4658161,4527089,131072,0,4658118,4527046,131072,0,4658277,4527205,131072,0,4658303,4527231,131072,0,1394,17148068,45890,0,1184,4736,2071942435424875,2072010292388007,2072010294188549,2071942437684607
9,Cijk_Ailk_Bljk_BBS_BH_UserArgs_MT256x224x64_MI16x16x1_SN_LDSB1_AFC0_AFEM8_AFEM8_ASEM32_CLR1_CADS0_DTVA0_DTVB0_EPS0_FDSI0_GRPM1_GRVWA8_GRVWB4_GSUAMB_GLS0_ISA942_IU1_K1_LBSPPA2048_LBSPPB128_LBSPPM0_LPA16_LPB4_LPM0_LRVW4_LWPMn1_MIAV0_MIWT4_14_MO40_NTn1_NTA0_NTB0_NTC0_NTD0_NTM0_NEPBS0_NLCA1_NLCB1_ONLL1_PGR2_PLR1_PKA1_SIA3_SS1_SPO0_SRVW0_SSO0_SVW4_SK0_SKXCCM0_TLDS1_ULSGRO0_USL1_UIOFGRO0_USFGROn1_VSn1_VWA4_VWB1_WSGRA1_WSGRB2_WS64_WG64_4_1.kd,2,0,14,1928,1928,303104,256,64000,0,128,352,112,64,0x0,0x7128dc017980,18944,54436,4343524,267647104,163333632,0,0,0,13336576.0,265216.0,0.0,13601792.0,0.0,0.0,0.0,13601792.0,4658470,4527398,131072,0,4658288,4527216,131072,0,4658270,4527198,131072,0,4658265,4527193,131072,0,4658143,4527071,131072,0,4658117,4527045,131072,0,4658272,4527200,131072,0,4658284,4527212,131072,0,4658469,4527397,131072,0,4658289,4527217,131072,0,4658271,4527199,131072,0,4658267,4527195,131072,0,4658143,4527071,131072,0,4658118,4527046,131072,0,4658273,4527201,131072,0,4658280,4527208,131072,0,1394,16717192,48585,0,1184,4736,2071942438275771,2072010294241467,2072010295886459,2071942440676260
10,Cijk_Ailk_Bljk_BBS_BH_UserArgs_MT256x224x64_MI16x16x1_SN_LDSB1_AFC0_AFEM8_AFEM8_ASEM32_CLR1_CADS0_DTVA0_DTVB0_EPS0_FDSI0_GRPM1_GRVWA8_GRVWB4_GSUAMB_GLS0_ISA942_IU1_K1_LBSPPA2048_LBSPPB128_LBSPPM0_LPA16_LPB4_LPM0_LRVW4_LWPMn1_MIAV0_MIWT4_14_MO40_NTn1_NTA0_NTB0_NTC0_NTD0_NTM0_NEPBS0_NLCA1_NLCB1_ONLL1_PGR2_PLR1_PKA1_SIA3_SS1_SPO0_SRVW0_SSO0_SVW4_SK0_SKXCCM0_TLDS1_ULSGRO0_USL1_UIOFGRO0_USFGROn1_VSn1_VWA4_VWB1_WSGRA1_WSGRB2_WS64_WG64_4_1.kd,2,0,18,1928,1928,303104,256,64000,0,128,352,112,64,0x0,0x7128dc017980,18944,53732,4317792,267647104,163333632,0,0,0,13336576.0,265216.0,0.0,13601792.0,0.0,0.0,0.0,13601792.0,4658304,4527232,131072,0,4658448,4527376,131072,0,4658260,4527188,131072,0,4658244,4527172,131072,0,4658162,4527090,131072,0,4658117,4527045,131072,0,4658276,4527204,131072,0,4658300,4527228,131072,0,4658304,4527232,131072,0,4658449,4527377,131072,0,4658257,4527185,131072,0,4658245,4527173,131072,0,4658161,4527089,131072,0,4658116,4527044,131072,0,4658277,4527205,131072,0,4658304,4527232,131072,0,1394,17201478,41593,0,1184,4736,2071942441261495,2072010295929042,2072010297498603,2071942443685820
11,Cijk_Ailk_Bljk_BBS_BH_UserArgs_MT256x224x64_MI16x16x1_SN_LDSB1_AFC0_AFEM8_AFEM8_ASEM32_CLR1_CADS0_DTVA0_DTVB0_EPS0_FDSI0_GRPM1_GRVWA8_GRVWB4_GSUAMB_GLS0_ISA942_IU1_K1_LBSPPA2048_LBSPPB128_LBSPPM0_LPA16_LPB4_LPM0_LRVW4_LWPMn1_MIAV0_MIWT4_14_MO40_NTn1_NTA0_NTB0_NTC0_NTD0_NTM0_NEPBS0_NLCA1_NLCB1_ONLL1_PGR2_PLR1_PKA1_SIA3_SS1_SPO0_SRVW0_SSO0_SVW4_SK0_SKXCCM0_TLDS1_ULSGRO0_USL1_UIOFGRO0_USFGROn1_VSn1_VWA4_VWB1_WSGRA1_WSGRB2_WS64_WG64_4_1.kd,2,0,22,1928,1928,303104,256,64000,0,128,352,112,64,0x0,0x7128dc017980,18944,54613,4318880,267647104,163333632,0,0,0,13336576.0,265216.0,0.0,13601792.0,0.0,0.0,0.0,13601792.0,4658308,4527236,131072,0,4658448,4527376,131072,0,4658269,4527197,131072,0,4658270,4527198,131072,0,4658142,4527070,131072,0,4658116,4527044,131072,0,4658272,4527200,131072,0,4658283,4527211,131072,0,4658309,4527237,131072,0,4658449,4527377,131072,0,4658270,4527198,131072,0,4658265,4527193,131072,0,4658144,4527072,131072,0,4658118,4527046,131072,0,4658273,4527201,131072,0,4658283,4527211,131072,0,1394,16761158,37185,0,1184,4736,2071942444258678,2072010297541146,2072010299111508,2071942446669252
12,Cijk_Ailk_Bljk_BBS_BH_UserArgs_MT256x224x64_MI16x16x1_SN_LDSB1_AFC0_AFEM8_AFEM8_ASEM32_CLR1_CADS0_DTVA0_DTVB0_EPS0_FDSI0_GRPM1_GRVWA8_GRVWB4_GSUAMB_GLS0_ISA942_IU1_K1_LBSPPA2048_LBSPPB128_LBSPPM0_LPA16_LPB4_LPM0_LRVW4_LWPMn1_MIAV0_MIWT4_14_MO40_NTn1_NTA0_NTB0_NTC0_NTD0_NTM0_NEPBS0_NLCA1_NLCB1_ONLL1_PGR2_PLR1_PKA1_SIA3_SS1_SPO0_SRVW0_SSO0_SVW4_SK0_SKXCCM0_TLDS1_ULSGRO0_USL1_UIOFGRO0_USFGROn1_VSn1_VWA4_VWB1_WSGRA1_WSGRB2_WS64_WG64_4_1.kd,2,0,26,1928,1928,303104,256,64000,0,128,352,112,64,0x0,0x7128dc017980,18944,53761,4307476,267647104,163333632,0,0,0,13336576.0,265216.0,0.0,13601792.0,0.0,0.0,0.0,13601792.0,4658304,4527232,131072,0,4658288,4527216,131072,0,4658418,4527346,131072,0,4658244,4527172,131072,0,4658163,4527091,131072,0,4658117,4527045,131072,0,4658277,4527205,131072,0,4658302,4527230,131072,0,4658304,4527232,131072,0,4658289,4527217,131072,0,4658418,4527346,131072,0,4658245,4527173,131072,0,4658161,4527089,131072,0,4658116,4527044,131072,0,4658277,4527205,131072,0,4658303,4527231,131072,0,1394,16784254,36549,0,1184,4736,2071942447249981,2072010299153690,2072010300689881,2071942449662608
13,Cijk_Ailk_Bljk_BBS_BH_UserArgs_MT256x224x64_MI16x16x1_SN_LDSB1_AFC0_AFEM8_AFEM8_ASEM32_CLR1_CADS0_DTVA0_DTVB0_EPS0_FDSI0_GRPM1_GRVWA8_GRVWB4_GSUAMB_GLS0_ISA942_IU1_K1_LBSPPA2048_LBSPPB128_LBSPPM0_LPA16_LPB4_LPM0_LRVW4_LWPMn1_MIAV0_MIWT4_14_MO40_NTn1_NTA0_NTB0_NTC0_NTD0_NTM0_NEPBS0_NLCA1_NLCB1_ONLL1_PGR2_PLR1_PKA1_SIA3_SS1_SPO0_SRVW0_SSO0_SVW4_SK0_SKXCCM0_TLDS1_ULSGRO0_USL1_UIOFGRO0_USFGROn1_VSn1_VWA4_VWB1_WSGRA1_WSGRB2_WS64_WG64_4_1.kd,2,0,30,1928,1928,303104,256,64000,0,128,352,112,64,0x0,0x7128dc017980,18944,54858,4355596,267647104,163333632,0,0,0,13336576.0,265216.0,0.0,13601792.0,0.0,0.0,0.0,13601792.0,4658309,4527237,131072,0,4658288,4527216,131072,0,4658434,4527362,131072,0,4658270,4527198,131072,0,4658143,4527071,131072,0,4658116,4527044,131072,0,4658272,4527200,131072,0,4658285,4527213,131072,0,4658309,4527237,131072,0,4658289,4527217,131072,0,4658431,4527359,131072,0,4658262,4527190,131072,0,4658144,4527072,131072,0,4658118,4527046,131072,0,4658273,4527201,131072,0,4658286,4527214,131072,0,1394,16763459,36544,0,1184,4736,2071942450249196,2072010300731984,2072010302227595,2071942452667141
14,Cijk_Ailk_Bljk_BBS_BH_UserArgs_MT256x224x64_MI16x16x1_SN_LDSB1_AFC0_AFEM8_AFEM8_ASEM32_CLR1_CADS0_DTVA0_DTVB0_EPS0_FDSI0_GRPM1_GRVWA8_GRVWB4_GSUAMB_GLS0_ISA942_IU1_K1_LBSPPA2048_LBSPPB128_LBSPPM0_LPA16_LPB4_LPM0_LRVW4_LWPMn1_MIAV0_MIWT4_14_MO40_NTn1_NTA0_NTB0_NTC0_NTD0_NTM0_NEPBS0_NLCA1_NLCB1_ONLL1_PGR2_PLR1_PKA1_SIA3_SS1_SPO0_SRVW0_SSO0_SVW4_SK0_SKXCCM0_TLDS1_ULSGRO0_USL1_UIOFGRO0_USFGROn1_VSn1_VWA4_VWB1_WSGRA1_WSGRB2_WS64_WG64_4_1.kd,2,0,34,1928,1928,303104,256,64000,0,128,352,112,64,0x0,0x7128dc017980,18944,54543,4361004,267647104,163333632,0,0,0,13336576.0,265216.0,0.0,13601792.0,0.0,0.0,0.0,13601792.0,4658304,4527232,131072,0,4658288,4527216,131072,0,4658257,4527185,131072,0,4658405,4527333,131072,0,4658160,4527088,131072,0,4658117,4527045,131072,0,4658276,4527204,131072,0,4658304,4527232,131072,0,4658304,4527232,131072,0,4658289,4527217,131072,0,4658257,4527185,131072,0,4658405,4527333,131072,0,4658161,4527089,131072,0,4658117,4527045,131072,0,4658277,4527205,131072,0,4658302,4527230,131072,0,1394,16762206,37690,0,1184,4736,2071942453243503,2072010302268816,2072010303751608,2071942455653677
15,Cijk_Ailk_Bljk_BBS_BH_UserArgs_MT256x224x64_MI16x16x1_SN_LDSB1_AFC0_AFEM8_AFEM8_ASEM32_CLR1_CADS0_DTVA0_DTVB0_EPS0_FDSI0_GRPM1_GRVWA8_GRVWB4_GSUAMB_GLS0_ISA942_IU1_K1_LBSPPA2048_LBSPPB128_LBSPPM0_LPA16_LPB4_LPM0_LRVW4_LWPMn1_MIAV0_MIWT4_14_MO40_NTn1_NTA0_NTB0_NTC0_NTD0_NTM0_NEPBS0_NLCA1_NLCB1_ONLL1_PGR2_PLR1_PKA1_SIA3_SS1_SPO0_SRVW0_SSO0_SVW4_SK0_SKXCCM0_TLDS1_ULSGRO0_USL1_UIOFGRO0_USFGROn1_VSn1_VWA4_VWB1_WSGRA1_WSGRB2_WS64_WG64_4_1.kd,2,0,38,1928,1928,303104,256,64000,0,128,352,112,64,0x0,0x7128dc017980,18944,52865,4267928,267647104,163333632,0,0,0,13336576.0,265216.0,0.0,13601792.0,0.0,0.0,0.0,13601792.0,4658308,4527236,131072,0,4658288,4527216,131072,0,4658270,4527198,131072,0,4658426,4527354,131072,0,4658143,4527071,131072,0,4658118,4527046,131072,0,4658272,4527200,131072,0,4658283,4527211,131072,0,4658308,4527236,131072,0,4658289,4527217,131072,0,4658269,4527197,131072,0,4658423,4527351,131072,0,4658144,4527072,131072,0,4658117,4527045,131072,0,4658273,4527201,131072,0,4658285,4527213,131072,0,1394,16760911,35154,0,1184,4736,2071942456234867,2072010303793110,2072010305237205,2071942458651350
16,Cijk_Ailk_Bljk_BBS_BH_UserArgs_MT256x224x64_MI16x16x1_SN_LDSB1_AFC0_AFEM8_AFEM8_ASEM32_CLR1_CADS0_DTVA0_DTVB0_EPS0_FDSI0_GRPM1_GRVWA8_GRVWB4_GSUAMB_GLS0_ISA942_IU1_K1_LBSPPA2048_LBSPPB128_LBSPPM0_LPA16_LPB4_LPM0_LRVW4_LWPMn1_MIAV0_MIWT4_14_MO40_NTn1_NTA0_NTB0_NTC0_NTD0_NTM0_NEPBS0_NLCA1_NLCB1_ONLL1_PGR2_PLR1_PKA1_SIA3_SS1_SPO0_SRVW0_SSO0_SVW4_SK0_SKXCCM0_TLDS1_ULSGRO0_USL1_UIOFGRO0_USFGROn1_VSn1_VWA4_VWB1_WSGRA1_WSGRB2_WS64_WG64_4_1.kd,2,0,42,1928,1928,303104,256,64000,0,128,352,112,64,0x0,0x7128dc017980,18944,53938,4277020,267647104,163333632,0,0,0,13336576.0,265216.0,0.0,13601792.0,0.0,0.0,0.0,13601792.0,4658304,4527232,131072,0,4658288,4527216,131072,0,4658258,4527186,131072,0,4658246,4527174,131072,0,4658318,4527246,131072,0,4658118,4527046,131072,0,4658277,4527205,131072,0,4658302,4527230,131072,0,4658304,4527232,131072,0,4658289,4527217,131072,0,4658256,4527184,131072,0,4658244,4527172,131072,0,4658324,4527252,131072,0,4658116,4527044,131072,0,4658278,4527206,131072,0,4658306,4527234,131072,0,1394,16784251,42900,0,1184,4736,2071942459233741,2072010305277584,2072010306719957,2071942461653640
17,Cijk_Ailk_Bljk_BBS_BH_UserArgs_MT256x224x64_MI16x16x1_SN_LDSB1_AFC0_AFEM8_AFEM8_ASEM32_CLR1_CADS0_DTVA0_DTVB0_EPS0_FDSI0_GRPM1_GRVWA8_GRVWB4_GSUAMB_GLS0_ISA942_IU1_K1_LBSPPA2048_LBSPPB128_LBSPPM0_LPA16_LPB4_LPM0_LRVW4_LWPMn1_MIAV0_MIWT4_14_MO40_NTn1_NTA0_NTB0_NTC0_NTD0_NTM0_NEPBS0_NLCA1_NLCB1_ONLL1_PGR2_PLR1_PKA1_SIA3_SS1_SPO0_SRVW0_SSO0_SVW4_SK0_SKXCCM0_TLDS1_ULSGRO0_USL1_UIOFGRO0_USFGROn1_VSn1_VWA4_VWB1_WSGRA1_WSGRB2_WS64_WG64_4_1.kd,2,0,46,1928,1928,303104,256,64000,0,128,352,112,64,0x0,0x7128dc017980,18944,53412,4290488,267647104,163333632,0,0,0,13336576.0,265216.0,0.0,13601792.0,0.0,0.0,0.0,13601792.0,4658309,4527237,131072,0,4658288,4527216,131072,0,4658272,4527200,131072,0,4658264,4527192,131072,0,4658302,4527230,131072,0,4658117,4527045,131072,0,4658272,4527200,131072,0,4658285,4527213,131072,0,4658308,4527236,131072,0,4658289,4527217,131072,0,4658272,4527200,131072,0,4658268,4527196,131072,0,4658303,4527231,131072,0,4658116,4527044,131072,0,4658273,4527201,131072,0,4658285,4527213,131072,0,1394,16772076,34250,0,1184,4736,2071942462238525,2072010306760617,2072010308177312,2071942464648548
18,matmul_kernel.kd,2,0,49,1928,1928,1048576,256,16384,0,16,128,48,64,0x0,0x716128010600,0,0,0,599703552,202801152,0,0,0,0.0,0.0,947.0,17039360.0,0.0,12582912.0,0.0,17039360.0,13065024,12540736,524288,0,13065025,12540737,524288,0,13065029,12540741,524288,0,13065028,12540740,524288,0,13064706,12540418,524288,0,13065026,12540738,524288,0,13064707,12540419,524288,0,13064709,12540421,524288,0,13064830,12540542,524288,0,13064831,12540543,524288,0,13064834,12540546,524288,0,13064834,12540546,524288,0,13064512,12540224,524288,0,13064831,12540543,524288,0,13064511,12540223,524288,0,13064519,12540231,524288,0,1394,37595926,54765,0,4096,16384,2071942776348248,2072010612362091,2072010615035804,2071942779744581
19,matmul_kernel.kd,2,0,50,1928,1928,1048576,256,16384,0,16,128,48,64,0x0,0x716128010600,0,0,0,599703552,202801152,0,0,0,0.0,0.0,1053.0,17039360.0,0.0,12582912.0,0.0,17039360.0,13039477,12515189,524288,0,13039469,12515181,524288,0,13039520,12515232,524288,0,13039482,12515194,524288,0,13039181,12514893,524288,0,13039502,12515214,524288,0,13039153,12514865,524288,0,13039169,12514881,524288,0,13039409,12515121,524288,0,13039399,12515111,524288,0,13039452,12515164,524288,0,13039412,12515124,524288,0,13039113,12514825,524288,0,13039434,12515146,524288,0,13039085,12514797,524288,0,13039099,12514811,524288,0,1986,29244464,168890,0,4096,16384,2071942777354056,2072010615035804,2072010618185821,2071942783261190
20,matmul_kernel.kd,2,0,53,1928,1928,1048576,256,16384,0,16,128,48,64,0x0,0x716128010600,0,0,0,599703552,202801152,0,0,0,0.0,0.0,1184.0,17039360.0,0.0,12582912.0,0.0,17039360.0,13036707,12512419,524288,0,13036711,12512423,524288,0,13036712,12512424,524288,0,13036711,12512423,524288,0,13036388,12512100,524288,0,13036709,12512421,524288,0,13036394,12512106,524288,0,13036393,12512105,524288,0,13036713,12512425,524288,0,13036717,12512429,524288,0,13036721,12512433,524288,0,13036717,12512429,524288,0,13036396,12512108,524288,0,13036715,12512427,524288,0,13036403,12512115,524288,0,13036393,12512105,524288,0,1394,27350011,44657,0,4096,16384,2071942784045540,2072010618271708,2072010621154129,2071942787189549
21,matmul_kernel.kd,2,0,57,1928,1928,1048576,256,16384,0,16,128,48,64,0x0,0x716128010600,0,0,0,599703552,202801152,0,0,0,0.0,0.0,1196.0,17039360.0,0.0,12582912.0,0.0,17039360.0,13036170,12511882,524288,0,13036162,12511874,524288,0,13036207,12511919,524288,0,13036175,12511887,524288,0,13035852,12511564,524288,0,13036171,12511883,524288,0,13035842,12511554,524288,0,13035852,12511564,524288,0,13037346,12513058,524288,0,13037336,12513048,524288,0,13037378,12513090,524288,0,13037348,12513060,524288,0,13037023,12512735,524288,0,13037343,12513055,524288,0,13037015,12512727,524288,0,13037028,12512740,524288,0,1394,27179623,43989,0,4096,16384,2071942787910375,2072010621221068,2072010623919458,2071942790917392
22,matmul_kernel.kd,2,0,61,1928,1928,1048576,256,16384,0,16,128,48,64,0x0,0x716128010600,0,0,0,599703552,202801152,0,0,0,0.0,0.0,1179.0,17039360.0,0.0,12582912.0,0.0,17039360.0,13037504,12513216,524288,0,13037506,12513218,524288,0,13037509,12513221,524288,0,13037509,12513221,524288,0,13037184,12512896,524288,0,13037506,12513218,524288,0,13037194,12512906,524288,0,13037190,12512902,524288,0,13037731,12513443,524288,0,13037736,12513448,524288,0,13037737,12513449,524288,0,13037734,12513446,524288,0,13037412,12513124,524288,0,13037733,12513445,524288,0,13037420,12513132,524288,0,13037416,12513128,524288,0,1394,27429196,45742,0,4096,16384,2071942791656134,2072010623978546,2072010626728852,2071942794971286
23,matmul_kernel.kd,2,0,65,1928,1928,1048576,256,16384,0,16,128,48,64,0x0,0x716128010600,0,0,0,599703552,202801152,0,0,0,0.0,0.0,1293.0,17039360.0,0.0,12582912.0,0.0,17039360.0,13037938,12513650,524288,0,13037931,12513643,524288,0,13037976,12513688,524288,0,13037942,12513654,524288,0,13037620,12513332,524288,0,13037941,12513653,524288,0,13037610,12513322,524288,0,13037627,12513339,524288,0,13038716,12514428,524288,0,13038709,12514421,524288,0,13038750,12514462,524288,0,13038719,12514431,524288,0,13038397,12514109,524288,0,13038717,12514429,524288,0,13038387,12514099,524288,0,13038401,12514113,524288,0,1394,27380230,34923,0,4096,16384,2071942795727835,2072010626785857,2072010629439300,2071942799130316
24,matmul_kernel.kd,2,0,69,1928,1928,1048576,256,16384,0,16,128,48,64,0x0,0x716128010600,0,0,0,599703552,202801152,0,0,0,0.0,0.0,1245.0,17039360.0,0.0,12582912.0,0.0,17039360.0,13037494,12513206,524288,0,13037499,12513211,524288,0,13037500,12513212,524288,0,13037503,12513215,524288,0,13037176,12512888,524288,0,13037498,12513210,524288,0,13037184,12512896,524288,0,13037181,12512893,524288,0,13037330,12513042,524288,0,13037335,12513047,524288,0,13037337,12513049,524288,0,13037336,12513048,524288,0,13037010,12512722,524288,0,13037333,12513045,524288,0,13037020,12512732,524288,0,13037016,12512728,524288,0,1394,27714960,44471,0,4096,16384,2071942799846195,2072010629493460,2072010632053886,2071942803383225
25,matmul_kernel.kd,2,0,73,1928,1928,1048576,256,16384,0,16,128,48,64,0x0,0x716128010600,0,0,0,599703552,202801152,0,0,0,0.0,0.0,1228.0,17039360.0,0.0,12582912.0,0.0,17039360.0,13038592,12514304,524288,0,13038584,12514296,524288,0,13038626,12514338,524288,0,13038598,12514310,524288,0,13038279,12513991,524288,0,13038595,12514307,524288,0,13038264,12513976,524288,0,13038279,12513991,524288,0,13038474,12514186,524288,0,13038465,12514177,524288,0,13038505,12514217,524288,0,13038476,12514188,524288,0,13038154,12513866,524288,0,13038475,12514187,524288,0,13038145,12513857,524288,0,13038158,12513870,524288,0,1394,27728798,41628,0,4096,16384,2071942804060487,2072010632107405,2072010634674200,2071942807580311
26,matmul_kernel.kd,2,0,77,1928,1928,1048576,256,16384,0,16,128,48,64,0x0,0x716128010600,0,0,0,599703552,202801152,0,0,0,0.0,0.0,1235.0,17039360.0,0.0,12582912.0,0.0,17039360.0,13038858,12514570,524288,0,13038862,12514574,524288,0,13038863,12514575,524288,0,13038863,12514575,524288,0,13038541,12514253,524288,0,13038859,12514571,524288,0,13038546,12514258,524288,0,13038540,12514252,524288,0,13038588,12514300,524288,0,13038592,12514304,524288,0,13038593,12514305,524288,0,13038593,12514305,524288,0,13038269,12513981,524288,0,13038589,12514301,524288,0,13038275,12513987,524288,0,13038270,12513982,524288,0,1394,27702592,49109,0,4096,16384,2071942808252055,2072010634725676,2072010637257900,2071942811765990
27,matmul_kernel.kd,2,0,81,1928,1928,1048576,256,16384,0,16,128,48,64,0x0,0x716128010600,0,0,0,599703552,202801152,0,0,0,0.0,0.0,1227.0,17039360.0,0.0,12582912.0,0.0,17039360.0,13038248,12513960,524288,0,13038241,12513953,524288,0,13038286,12513998,524288,0,13038255,12513967,524288,0,13037931,12513643,524288,0,13038248,12513960,524288,0,13037920,12513632,524288,0,13037935,12513647,524288,0,13038165,12513877,524288,0,13038158,12513870,524288,0,13038204,12513916,524288,0,13038168,12513880,524288,0,13037844,12513556,524288,0,13038166,12513878,524288,0,13037837,12513549,524288,0,13037850,12513562,524288,0,1394,27773356,33247,0,4096,16384,2071942812487247,2072010637310178,2072010639767491,2071942815837771
28,matmul_kernel.kd,2,0,85,1928,1928,1048576,256,16384,0,16,128,48,64,0x0,0x716128010600,0,0,0,599703552,202801152,0,0,0,0.0,0.0,1203.0,17039360.0,0.0,12582912.0,0.0,17039360.0,13037606,12513318,524288,0,13037610,12513322,524288,0,13037612,12513324,524288,0,13037615,12513327,524288,0,13037292,12513004,524288,0,13037607,12513319,524288,0,13037295,12513007,524288,0,13037290,12513002,524288,0,13037678,12513390,524288,0,13037680,12513392,524288,0,13037679,12513391,524288,0,13037678,12513390,524288,0,13037357,12513069,524288,0,13037677,12513389,524288,0,13037363,12513075,524288,0,13037358,12513070,524288,0,1394,27339360,33216,0,4096,16384,2071942816565087,2072010639818366,2072010642301678,2071942819881331
29,matmul_kernel.kd,2,0,89,1928,1928,1048576,256,16384,0,16,128,48,64,0x0,0x716128010600,0,0,0,599703552,202801152,0,0,0,0.0,0.0,1218.0,17039360.0,0.0,12582912.0,0.0,17039360.0,13037252,12512964,524288,0,13037244,12512956,524288,0,13037289,12513001,524288,0,13037258,12512970,524288,0,13036936,12512648,524288,0,13037253,12512965,524288,0,13036924,12512636,524288,0,13036937,12512649,524288,0,13037914,12513626,524288,0,13037907,12513619,524288,0,13037950,12513662,524288,0,13037920,12513632,524288,0,13037595,12513307,524288,0,13037918,12513630,524288,0,13037587,12513299,524288,0,13037600,12513312,524288,0,1394,27396498,33538,0,4096,16384,2071942820631881,2072010642353635,2072010644758311,2071942823929807
30,"void at::native::vectorized_elementwise_kernel<4, at::native::FillFunctor<float>, std::array<char*, 1ul> >(int, at::native::FillFunctor<float>, std::array<char*, 1ul>) [clone .kd]",2,0,92,1928,1928,16777216,256,0,0,8,0,16,64,0x0,0x712905b2e140,262144,284722,22794992,5505024,1310720,0,0,0,0.0,0.0,1474.0,262144.0,0.0,0.0,0.0,262144.0,262163,19,262144,0,262480,336,262144,0,262148,4,262144,0,262160,16,262144,0,262144,0,262144,0,262144,0,262144,0,262160,16,262144,0,262224,80,262144,0,262163,19,262144,0,262480,336,262144,0,262148,4,262144,0,262160,16,262144,0,262144,0,262144,0,262144,0,262144,0,262160,16,262144,0,262224,80,262144,0,1185,908185,18982,0,65536,262144,2071942828206982,2072010647970831,2072010648017259,2071942828840138
31,micro_tk(micro_globals) [clone .kd],2,0,93,1928,1928,1048576,256,32768,0,76,132,32,64,0x0,0x712919a10580,98304,178386,14045248,566706176,224755712,0,0,0,0.0,0.0,2138.0,219152384.0,0.0,0.0,0.0,219152384.0,12877195,12615051,262144,0,12877087,12614943,262144,0,12883041,12620897,262144,0,12884395,12622251,262144,0,12865433,12603289,262144,0,12864806,12602662,262144,0,12865731,12603587,262144,0,12866015,12603871,262144,0,12877050,12614906,262144,0,12876928,12614784,262144,0,12882696,12620552,262144,0,12884021,12621877,262144,0,12865472,12603328,262144,0,12864880,12602736,262144,0,12865805,12603661,262144,0,12866056,12603912,262144,0,1302,52043293,106160,0,4096,16384,2071942829087484,2072010648270954,2072010651775296,2071942833401182
32,micro_tk(micro_globals) [clone .kd],2,0,95,1928,1928,1048576,256,32768,0,76,132,32,64,0x0,0x712919a10580,98304,168836,13489344,566706176,224755712,0,0,0,0.0,0.0,2304.0,219152384.0,0.0,0.0,0.0,219152384.0,12881073,12618929,262144,0,12881236,12619092,262144,0,12886717,12624573,262144,0,12888123,12625979,262144,0,12870092,12607948,262144,0,12869206,12607062,262144,0,12870254,12608110,262144,0,12870258,12608114,262144,0,12881136,12618992,262144,0,12881295,12619151,262144,0,12886708,12624564,262144,0,12888105,12625961,262144,0,12870031,12607887,262144,0,12869186,12607042,262144,0,12870266,12608122,262144,0,12870272,12608128,262144,0,1186,52201141,16011,0,4096,16384,2071942834030753,2072010651805300,2072010655432944,2071942838519320
33,micro_tk(micro_globals) [clone .kd],2,0,98,1928,1928,1048576,256,32768,0,76,132,32,64,0x0,0x712919a10580,98304,179238,14468728,566706176,224755712,0,0,0,0.0,0.0,2365.0,219152384.0,0.0,0.0,0.0,219152384.0,12880934,12618790,262144,0,12881043,12618899,262144,0,12886580,12624436,262144,0,12887968,12625824,262144,0,12869771,12607627,262144,0,12869131,12606987,262144,0,12870093,12607949,262144,0,12870217,12608073,262144,0,12880711,12618567,262144,0,12880871,12618727,262144,0,12886518,12624374,262144,0,12887846,12625702,262144,0,12869644,12607500,262144,0,12868983,12606839,262144,0,12869956,12607812,262144,0,12870126,12607982,262144,0,1186,51671758,15365,0,4096,16384,2071942839170754,2072010655481015,2072010658999778,2071942843716306
34,micro_tk(micro_globals) [clone .kd],2,0,103,1928,1928,1048576,256,32768,0,76,132,32,64,0x0,0x712919a10580,98304,182022,14581880,566706176,224755712,0,0,0,0.0,0.0,2393.0,219152384.0,0.0,0.0,0.0,219152384.0,12882021,12619877,262144,0,12882176,12620032,262144,0,12887713,12625569,262144,0,12888885,12626741,262144,0,12870951,12608807,262144,0,12870292,12608148,262144,0,12871342,12609198,262144,0,12870991,12608847,262144,0,12882122,12619978,262144,0,12882311,12620167,262144,0,12887775,12625631,262144,0,12889009,12626865,262144,0,12870920,12608776,262144,0,12870316,12608172,262144,0,12871303,12609159,262144,0,12871028,12608884,262144,0,1186,51683691,16795,0,4096,16384,2071942844362241,2072010659055500,2072010662533643,2071942848813532
35,micro_tk(micro_globals) [clone .kd],2,0,108,1928,1928,1048576,256,32768,0,76,132,32,64,0x0,0x712919a10580,98304,173784,13984952,566706176,224755712,0,0,0,0.0,0.0,2311.0,219152384.0,0.0,0.0,0.0,219152384.0,12881295,12619151,262144,0,12881067,12618923,262144,0,12886543,12624399,262144,0,12887987,12625843,262144,0,12869712,12607568,262144,0,12869049,12606905,262144,0,12870045,12607901,262144,0,12870155,12608011,262144,0,12881377,12619233,262144,0,12881148,12619004,262144,0,12886661,12624517,262144,0,12888078,12625934,262144,0,12869779,12607635,262144,0,12869122,12606978,262144,0,12870111,12607967,262144,0,12870242,12608098,262144,0,1186,51458042,14636,0,4096,16384,2071942849482762,2072010662585480,2072010666045355,2071942853965050
36,micro_tk(micro_globals) [clone .kd],2,0,113,1928,1928,1048576,256,32768,0,76,132,32,64,0x0,0x712919a10580,98304,173622,13746680,566706176,224755712,0,0,0,0.0,0.0,2333.0,219152384.0,0.0,0.0,0.0,219152384.0,12883013,12620869,262144,0,12883022,12620878,262144,0,12888523,12626379,262144,0,12889907,12627763,262144,0,12871520,12609376,262144,0,12870738,12608594,262144,0,12871879,12609735,262144,0,12871701,12609557,262144,0,12882693,12620549,262144,0,12882684,12620540,262144,0,12888271,12626127,262144,0,12889711,12627567,262144,0,12871367,12609223,262144,0,12870592,12608448,262144,0,12871743,12609599,262144,0,12871575,12609431,262144,0,1186,51391224,14951,0,4096,16384,2071942854606939,2072010666097072,2072010669558590,2071942859095186
37,micro_tk(micro_globals) [clone .kd],2,0,118,1928,1928,1048576,256,32768,0,76,132,32,64,0x0,0x712919a10580,98304,176706,14068328,566706176,224755712,0,0,0,0.0,0.0,2298.0,219152384.0,0.0,0.0,0.0,219152384.0,12882272,12620128,262144,0,12882580,12620436,262144,0,12887821,12625677,262144,0,12889131,12626987,262144,0,12871409,12609265,262144,0,12870578,12608434,262144,0,12871754,12609610,262144,0,12871603,12609459,262144,0,12882358,12620214,262144,0,12882728,12620584,262144,0,12887917,12625773,262144,0,12889242,12627098,262144,0,12871510,12609366,262144,0,12870693,12608549,262144,0,12871790,12609646,262144,0,12871657,12609513,262144,0,1186,51847925,14765,0,4096,16384,2071942859735413,2072010669608824,2072010673037614,2071942864195448
38,micro_tk(micro_globals) [clone .kd],2,0,123,1928,1928,1048576,256,32768,0,76,132,32,64,0x0,0x712919a10580,98304,172862,13935992,566706176,224755712,0,0,0,0.0,0.0,2369.0,219152384.0,0.0,0.0,0.0,219152384.0,12881395,12619251,262144,0,12881470,12619326,262144,0,12887164,12625020,262144,0,12888178,12626034,262144,0,12870022,12607878,262144,0,12869558,12607414,262144,0,12870317,12608173,262144,0,12870279,12608135,262144,0,12881572,12619428,262144,0,12881631,12619487,262144,0,12887356,12625212,262144,0,12888338,12626194,262144,0,12870249,12608105,262144,0,12869807,12607663,262144,0,12870541,12608397,262144,0,12870463,12608319,262144,0,1186,52168640,15278,0,4096,16384,2071942864829856,2072010673089050,2072010676520925,2071942869259026
39,micro_tk(micro_globals) [clone .kd],2,0,128,1928,1928,1048576,256,32768,0,76,132,32,64,0x0,0x712919a10580,98304,172496,13883400,566706176,224755712,0,0,0,0.0,0.0,2341.0,219152384.0,0.0,0.0,0.0,219152384.0,12881881,12619737,262144,0,12882137,12619993,262144,0,12887654,12625510,262144,0,12889240,12627096,262144,0,12870740,12608596,262144,0,12870062,12607918,262144,0,12871110,12608966,262144,0,12871088,12608944,262144,0,12881737,12619593,262144,0,12881931,12619787,262144,0,12887647,12625503,262144,0,12889217,12627073,262144,0,12870736,12608592,262144,0,12870016,12607872,262144,0,12871043,12608899,262144,0,12871040,12608896,262144,0,1186,52356160,14629,0,4096,16384,2071942869897930,2072010676570434,2072010679999865,2071942874330294
40,micro_tk(micro_globals) [clone .kd],2,0,133,1928,1928,1048576,256,32768,0,76,132,32,64,0x0,0x712919a10580,98304,150182,11951848,566706176,224755712,0,0,0,0.0,0.0,2328.0,219152384.0,0.0,0.0,0.0,219152384.0,12881893,12619749,262144,0,12882113,12619969,262144,0,12887923,12625779,262144,0,12889399,12627255,262144,0,12870726,12608582,262144,0,12870000,12607856,262144,0,12871025,12608881,262144,0,12871008,12608864,262144,0,12881778,12619634,262144,0,12882058,12619914,262144,0,12887886,12625742,262144,0,12889291,12627147,262144,0,12870603,12608459,262144,0,12869883,12607739,262144,0,12870874,12608730,262144,0,12870850,12608706,262144,0,1186,52725148,18224,0,4096,16384,2071942874966174,2072010680049457,2072010683466389,2071942879376276
41,micro_tk(micro_globals) [clone .kd],2,0,138,1928,1928,1048576,256,32768,0,76,132,32,64,0x0,0x712919a10580,98304,151740,12066752,566706176,224755712,0,0,0,0.0,0.0,2319.0,219152384.0,0.0,0.0,0.0,219152384.0,12883198,12621054,262144,0,12883279,12621135,262144,0,12888542,12626398,262144,0,12889933,12627789,262144,0,12871532,12609388,262144,0,12871190,12609046,262144,0,12872121,12609977,262144,0,12871728,12609584,262144,0,12883046,12620902,262144,0,12883144,12621000,262144,0,12888455,12626311,262144,0,12889854,12627710,262144,0,12871428,12609284,262144,0,12871107,12608963,262144,0,12872030,12609886,262144,0,12871598,12609454,262144,0,1186,52711800,15394,0,4096,16384,2071942880007669,2072010683515061,2072010686937802,2071942884453734
42,micro_tk(micro_globals) [clone .kd],2,0,143,1928,1928,1048576,256,32768,0,76,132,32,64,0x0,0x712919a10580,98304,147514,12038136,566706176,224755712,0,0,0,0.0,0.0,2410.0,219152384.0,0.0,0.0,0.0,219152384.0,12882427,12620283,262144,0,12882453,12620309,262144,0,12888197,12626053,262144,0,12889560,12627416,262144,0,12870853,12608709,262144,0,12870089,12607945,262144,0,12871386,12609242,262144,0,12871454,12609310,262144,0,12882762,12620618,262144,0,12882840,12620696,262144,0,12888374,12626230,262144,0,12889773,12627629,262144,0,12870985,12608841,262144,0,12870207,12608063,262144,0,12871533,12609389,262144,0,12871607,12609463,262144,0,1186,52605702,16047,0,4096,16384,2071942885084196,2072010686986193,2072010690388784,2071942889531943
43,"void at::native::elementwise_kernel<512, 1, at::native::gpu_kernel_impl<at::native::direct_copy_kernel_cuda(at::TensorIteratorBase&)::{lambda()#3}::operator()() const::{lambda()#7}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::native::direct_copy_kernel_cuda(at::TensorIteratorBase&)::{lambda()#3}::operator()() const::{lambda()#7}::operator()() const::{lambda(float)#1} const&)::{lambda(int)#1}>(int, at::native::gpu_kernel_impl<at::native::direct_copy_kernel_cuda(at::TensorIteratorBase&)::{lambda()#3}::operator()() const::{lambda()#7}::operator()() const::{lambda(float)#1}>(at::TensorIteratorBase&, at::native::direct_copy_kernel_cuda(at::TensorIteratorBase&)::{lambda()#3}::operator()() const::{lambda()#7}::operator()() const::{lambda(float)#1} const&)::{lambda(int)#1}) [clone .kd]",2,0,147,1928,1928,67108864,512,0,0,12,4,32,64,0x0,0x7128a306ed00,4194304,4123728,330261832,84934656,29360128,0,0,0,0.0,0.0,15239.0,2097152.0,0.0,0.0,0.0,2097152.0,328331,66187,262144,0,328350,66206,262144,0,328337,66193,262144,0,328340,66196,262144,0,328506,66362,262144,0,328320,66176,262144,0,328669,66525,262144,0,328750,66606,262144,0,328330,66186,262144,0,328345,66201,262144,0,328339,66195,262144,0,328347,66203,262144,0,328510,66366,262144,0,328320,66176,262144,0,328668,66524,262144,0,328748,66604,262144,0,1185,2828713,16819,0,131072,1048576,2071942897301742,2072010697152635,2072010697323488,2071942898054706
44,"void at::native::vectorized_elementwise_kernel<4, at::native::CUDAFunctor_add<float>, std::array<char*, 3ul> >(int, at::native::CUDAFunctor_add<float>, std::array<char*, 3ul>) [clone .kd]",2,0,148,1928,1928,16777216,256,0,0,16,0,32,64,0x0,0x712892660e40,786432,797152,63749152,7602176,786432,0,0,0,0.0,0.0,5299.0,786432.0,0.0,0.0,0.0,786432.0,524391,262247,262144,0,524656,262512,262144,0,524612,262468,262144,0,524634,262490,262144,0,524729,262585,262144,0,524637,262493,262144,0,524675,262531,262144,0,524335,262191,262144,0,524395,262251,262144,0,524656,262512,262144,0,524612,262468,262144,0,524630,262486,262144,0,524733,262589,262144,0,524637,262493,262144,0,524676,262532,262144,0,524336,262192,262144,0,1186,3156878,17122,0,65536,262144,2071942904515890,2072010703343278,2072010703535603,2071942905287380
45,"void at::native::vectorized_elementwise_kernel<4, at::native::AbsFunctor<float>, std::array<char*, 2ul> >(int, at::native::AbsFunctor<float>, std::array<char*, 2ul>) [clone .kd]",2,0,149,1928,1928,16777216,256,0,0,12,4,32,64,0x0,0x712905f957c0,524288,558404,44516944,6815744,1310720,0,0,0,0.0,0.0,2519.0,524288.0,0.0,0.0,0.0,524288.0,393560,131416,262144,0,393546,131402,262144,0,393557,131413,262144,0,393564,131420,262144,0,393321,131177,262144,0,393254,131110,262144,0,393236,131092,262144,0,393236,131092,262144,0,393558,131414,262144,0,393545,131401,262144,0,393558,131414,262144,0,393559,131415,262144,0,393317,131173,262144,0,393253,131109,262144,0,393235,131091,262144,0,393241,131097,262144,0,1429,2119381,18961,0,65536,262144,2071942906904181,2072010704887241,2072010705006457,2071942907642783
46,__amd_rocclr_fillBufferAligned.kd,2,0,150,1928,1928,256,256,0,0,12,4,48,64,0x0,0x71612802ba00,8,64,4880,183,38,0,0,0,0.0,0.0,0.0,2.0,0.0,0.0,0.0,2.0,0,0,0,0,4,4,0,0,4,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,4,0,0,4,4,0,0,8,7,1,0,4,4,0,0,4,4,0,0,4,4,0,0,5,5,0,0,6,6,0,0,5,5,0,0,1394,120342,18779,0,1,4,2071942907620240,2072010705006457,2072010705010423,2071942908608381
47,"void at::native::reduce_kernel<512, 1, at::native::ReduceOp<float, at::native::func_wrapper_t<float, at::native::MaxNanFunctor<float> >, unsigned int, float, 4, 4> >(at::native::ReduceOp<float, at::native::func_wrapper_t<float, at::native::MaxNanFunctor<float> >, unsigned int, float, 4, 4>) [clone .kd]",2,0,151,1928,1928,155648,512,2560,48,28,4,80,64,0x0,0x712881a18380,35006,251788,20156992,7593947,4489550,0,0,0,0.0,0.0,0.0,267654.0,0.0,0.0,0.0,267654.0,137288,132376,32,0,137428,132364,32,152,137416,132536,0,0,136878,131974,24,0,137074,132194,0,0,137243,132362,1,0,137266,132354,32,0,137186,132274,32,0,137285,132373,32,0,137424,132360,32,152,137411,132531,0,0,136876,131972,24,0,137072,132192,0,0,137242,132362,0,0,137264,132352,32,0,137184,132272,32,0,3915,4312709,53638,0,304,2432,2071942910837698,2072010707646601,2072010707773429,2071942911667695
48,__amd_rocclr_copyBuffer.kd,2,0,152,1928,1928,512,512,0,0,16,0,32,64,0x0,0x71612802ba80,16,122,9296,299,65,0,0,0,0.0,0.0,0.0,8.0,0.0,0.0,0.0,8.0,4,4,0,0,8,8,0,0,0,0,0,0,0,0,0,0,4,4,0,0,5,5,0,0,8,8,0,0,8,8,0,0,0,0,0,0,4,4,0,0,4,0,4,0,3,3,0,0,0,0,0,0,0,0,0,0,5,5,0,0,4,4,0,0,1394,331801,20220,0,1,8,2071942911523242,2072010707773429,2072010707777435,2071942912622677
49,__amd_rocclr_fillBufferAligned.kd,2,0,154,1928,1928,256,256,0,0,12,4,48,64,0x0,0x71612802ba00,8,88,7392,183,38,0,0,0,0.0,0.0,0.0,2.0,0.0,0.0,0.0,2.0,0,0,0,0,5,5,0,0,6,6,0,0,4,4,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,4,0,0,4,4,0,0,9,8,1,0,4,4,0,0,4,4,0,0,4,4,0,0,4,4,0,0,5,5,0,0,5,5,0,0,1394,96218,21686,0,1,4,2071942913066544,2072010707842651,2072010707844894,2071942913970300
50,"void at::native::reduce_kernel<512, 1, at::native::ReduceOp<float, at::native::MeanOps<float, float, float, float>, unsigned int, float, 4, 4> >(at::native::ReduceOp<float, at::native::MeanOps<float, float, float, float>, unsigned int, float, 4, 4>) [clone .kd]",2,0,155,1928,1928,155648,512,2560,48,28,4,80,64,0x0,0x7128f4d17880,35007,212194,17041776,3837074,1819959,0,0,0,0.0,0.0,0.0,267654.0,0.0,0.0,0.0,267654.0,136974,132062,32,0,137435,132371,32,152,136535,131655,0,0,137119,132215,24,0,136992,132112,0,0,137002,132121,1,0,137107,132195,32,0,136946,132034,32,0,136968,132056,32,0,137431,132367,32,152,136535,131655,0,0,137114,132210,24,0,136992,132112,0,0,137002,132122,0,0,137104,132192,32,0,136944,132032,32,0,1185,1591572,17936,0,304,2432,2071942916315518,2072010710136443,2072010710235589,2071942916989124
51,__amd_rocclr_copyBuffer.kd,2,0,156,1928,1928,512,512,0,0,16,0,32,64,0x0,0x71612802ba80,16,120,9104,299,65,0,0,0,0.0,0.0,0.0,8.0,0.0,0.0,0.0,8.0,4,4,0,0,8,8,0,0,0,0,0,0,0,0,0,0,4,4,0,0,5,5,0,0,8,8,0,0,10,10,0,0,0,0,0,0,4,4,0,0,4,0,4,0,1,1,0,0,0,0,0,0,0,0,0,0,5,5,0,0,4,4,0,0,1394,327121,20577,0,1,8,2071942916890338,2072010710235589,2072010710239675,2071942917955483
52,"void at::native::vectorized_elementwise_kernel<4, at::native::compare_scalar_kernel<float>(at::TensorIteratorBase&, at::native::(anonymous namespace)::OpType, float)::{lambda(float)#1}, std::array<char*, 2ul> >(int, at::native::compare_scalar_kernel<float>(at::TensorIteratorBase&, at::native::(anonymous namespace)::OpType, float)::{lambda(float)#1}, std::array<char*, 2ul>) [clone .kd]",2,0,158,1928,1928,4194304,256,0,0,24,0,64,64,0x0,0x7128816314c0,65536,134568,10883568,22151168,3473408,0,0,0,0.0,0.0,3323.0,524288.0,0.0,0.0,0.0,524288.0,196950,131414,65536,0,196937,131401,65536,0,197350,131814,65536,0,196952,131416,65536,0,197248,131712,65536,0,197351,131815,65536,0,197257,131721,65536,0,197248,131712,65536,0,196950,131414,65536,0,196938,131402,65536,0,197351,131815,65536,0,196950,131414,65536,0,197248,131712,65536,0,197352,131816,65536,0,197256,131720,65536,0,197248,131712,65536,0,1186,1035715,19182,0,16384,65536,2071942922533162,2072010714620913,2072010714681042,2071942923166238
53,"void at::native::elementwise_kernel<512, 1, at::native::gpu_kernel_impl<at::native::direct_copy_kernel_cuda(at::TensorIteratorBase&)::{lambda()#3}::operator()() const::{lambda()#4}::operator()() const::{lambda(long)#1}>(at::TensorIteratorBase&, at::native::direct_copy_kernel_cuda(at::TensorIteratorBase&)::{lambda()#3}::operator()() const::{lambda()#4}::operator()() const::{lambda(long)#1} const&)::{lambda(int)#1}>(int, at::native::gpu_kernel_impl<at::native::direct_copy_kernel_cuda(at::TensorIteratorBase&)::{lambda()#3}::operator()() const::{lambda()#4}::operator()() const::{lambda(long)#1}>(at::TensorIteratorBase&, at::native::direct_copy_kernel_cuda(at::TensorIteratorBase&)::{lambda()#3}::operator()() const::{lambda()#4}::operator()() const::{lambda(long)#1} const&)::{lambda(int)#1}) [clone .kd]",2,0,159,1928,1928,67108864,512,0,0,12,4,32,64,0x0,0x7128a306e700,4194304,4108256,328805088,93323264,31457280,0,0,0,0.0,0.0,19789.0,2097152.0,0.0,0.0,0.0,2097152.0,557962,33674,524288,0,557420,33132,524288,0,557405,33117,524288,0,557408,33120,524288,0,558166,33878,524288,0,558304,34016,524288,0,558388,34100,524288,0,558378,34090,524288,0,557965,33677,524288,0,557417,33129,524288,0,557409,33121,524288,0,557411,33123,524288,0,558179,33891,524288,0,558302,34014,524288,0,558384,34096,524288,0,558363,34075,524288,0,1601,3161190,213887,0,131072,1048576,2071942923204555,2072010714701152,2072010714891513,2071942924119938
54,__amd_rocclr_fillBufferAligned.kd,2,0,160,1928,1928,256,256,0,0,12,4,48,64,0x0,0x71612802ba00,8,98,8016,183,38,0,0,0,0.0,0.0,0.0,2.0,0.0,0.0,0.0,2.0,0,0,0,0,4,4,0,0,4,4,0,0,4,4,0,0,1,1,0,0,0,0,0,0,5,5,0,0,5,5,0,0,5,5,0,0,8,8,0,0,4,4,0,0,4,4,0,0,4,4,0,0,6,5,1,0,7,7,0,0,7,7,0,0,1417,233287,40260,0,1,4,2071942923789049,2072010714891513,2072010714895359,2071942925008652
55,"void at::native::reduce_kernel<512, 1, at::native::ReduceOp<long, at::native::func_wrapper_t<long, at::native::sum_functor<long, long, long>::operator()(at::TensorIterator&)::{lambda(long, long)#2}>, unsigned int, long, 4, 4> >(at::native::ReduceOp<long, at::native::func_wrapper_t<long, at::native::sum_functor<long, long, long>::operator()(at::TensorIterator&)::{lambda(long, long)#2}>, unsigned int, long, 4, 4>) [clone .kd]",2,0,161,1928,1928,155648,512,4608,80,36,4,80,64,0x0,0x71286102e7c0,35006,199696,16061552,5216087,2645406,0,0,0,0.0,0.0,0.0,529798.0,0.0,0.0,0.0,529798.0,268439,263527,32,0,268210,263298,32,0,268030,263126,24,0,268200,263288,32,0,268245,263365,0,0,268478,263445,1,152,268344,263448,16,0,268333,263437,16,0,268440,263528,32,0,268215,263303,32,0,268034,263130,24,0,268204,263292,32,0,268248,263368,0,0,268477,263445,0,152,268341,263445,16,0,268330,263434,16,0,3915,5561047,53145,0,304,2432,2071942928592932,2072010718852950,2072010719056692,2071942929509067
56,__amd_rocclr_copyBuffer.kd,2,0,162,1928,1928,512,512,0,0,16,0,32,64,0x0,0x71612802ba80,16,140,11184,351,65,0,0,0,0.0,0.0,0.0,16.0,0.0,0.0,0.0,16.0,14,6,8,0,8,8,0,0,0,0,0,0,0,0,0,0,4,4,0,0,5,5,0,0,8,8,0,0,8,8,0,0,0,0,0,0,4,4,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,5,5,0,0,4,4,0,0,1394,345546,20272,0,1,8,2071942929239518,2072010719056692,2072010719062300,2071942930459673
57,"void at::native::vectorized_elementwise_kernel<4, at::native::CUDAFunctor_add<float>, std::array<char*, 3ul> >(int, at::native::CUDAFunctor_add<float>, std::array<char*, 3ul>) [clone .kd]",2,0,164,1928,1928,16777216,256,0,0,16,0,32,64,0x0,0x712892660e40,786432,814428,64570936,7602176,786432,0,0,0,0.0,0.0,6035.0,786432.0,0.0,0.0,0.0,786432.0,524395,262251,262144,0,524630,262486,262144,0,524743,262599,262144,0,524633,262489,262144,0,524655,262511,262144,0,524637,262493,262144,0,524650,262506,262144,0,524333,262189,262144,0,524395,262251,262144,0,524630,262486,262144,0,524740,262596,262144,0,524632,262488,262144,0,524657,262513,262144,0,524637,262493,262144,0,524655,262511,262144,0,524335,262191,262144,0,1186,2886150,17436,0,65536,262144,2071942930916368,2072010719120666,2072010719295685,2071942931965269
58,"void at::native::vectorized_elementwise_kernel<4, at::native::AbsFunctor<float>, std::array<char*, 2ul> >(int, at::native::AbsFunctor<float>, std::array<char*, 2ul>) [clone .kd]",2,0,165,1928,1928,16777216,256,0,0,12,4,32,64,0x0,0x712905f957c0,524288,705704,56648720,6815744,1310720,0,0,0,0.0,0.0,2512.0,524288.0,0.0,0.0,0.0,524288.0,393540,131396,262144,0,393536,131392,262144,0,393640,131496,262144,0,393548,131404,262144,0,393245,131101,262144,0,393242,131098,262144,0,393244,131100,262144,0,393242,131098,262144,0,393541,131397,262144,0,393537,131393,262144,0,393621,131477,262144,0,393548,131404,262144,0,393242,131098,262144,0,393241,131097,262144,0,393244,131100,262144,0,393240,131096,262144,0,1259,2295731,94437,0,65536,262144,2071942931808447,2072010719295685,2072010719443944,2071942932947481
59,__amd_rocclr_fillBufferAligned.kd,2,0,166,1928,1928,256,256,0,0,12,4,48,64,0x0,0x71612802ba00,8,96,7536,183,38,0,0,0,0.0,0.0,0.0,2.0,0.0,0.0,0.0,2.0,0,0,0,0,4,4,0,0,4,4,0,0,5,5,0,0,2,2,0,0,0,0,0,0,4,4,0,0,4,4,0,0,4,4,0,0,8,7,1,0,4,4,0,0,4,4,0,0,4,4,0,0,4,4,0,0,4,4,0,0,5,5,0,0,1394,706090,19346,0,1,4,2071942932416687,2072010719443944,2072010719448471,2071942933803537
60,"void at::native::reduce_kernel<512, 1, at::native::ReduceOp<float, at::native::func_wrapper_t<float, at::native::MaxNanFunctor<float> >, unsigned int, float, 4, 4> >(at::native::ReduceOp<float, at::native::func_wrapper_t<float, at::native::MaxNanFunctor<float> >, unsigned int, float, 4, 4>) [clone .kd]",2,0,167,1928,1928,155648,512,2560,48,28,4,80,64,0x0,0x712881a18380,35006,200876,16115032,7593947,4489550,0,0,0,0.0,0.0,0.0,267654.0,0.0,0.0,0.0,267654.0,137189,132277,32,0,137424,132360,32,152,137236,132356,0,0,136867,131963,24,0,137254,132374,0,0,137415,132535,0,0,137367,132455,32,0,137042,132130,32,0,137191,132279,32,0,137428,132364,32,152,137237,132357,0,0,136870,131966,24,0,137265,132385,0,0,137416,132535,1,0,137371,132459,32,0,137039,132127,32,0,1209,2715917,43684,0,304,2432,2071942933243329,2072010719448471,2072010719580787,2071942934633405
61,__amd_rocclr_copyBuffer.kd,2,0,168,1928,1928,512,512,0,0,16,0,32,64,0x0,0x71612802ba80,16,100,7600,299,65,0,0,0,0.0,0.0,0.0,8.0,0.0,0.0,0.0,8.0,4,4,0,0,8,8,0,0,0,0,0,0,0,0,0,0,4,4,0,0,5,5,0,0,8,8,0,0,8,8,0,0,0,0,0,0,5,5,0,0,4,0,4,0,2,2,0,0,0,0,0,0,2,2,0,0,6,6,0,0,4,4,0,0,1394,816670,19968,0,1,8,2071942934109460,2072010719580787,2072010719584913,2071942935498834
62,__amd_rocclr_fillBufferAligned.kd,2,0,170,1928,1928,256,256,0,0,12,4,48,64,0x0,0x71612802ba00,8,54,4640,183,38,0,0,0,0.0,0.0,0.0,2.0,0.0,0.0,0.0,2.0,0,0,0,0,4,4,0,0,4,4,0,0,4,4,0,0,0,0,0,0,0,0,0,0,4,4,0,0,4,4,0,0,6,6,0,0,9,8,1,0,4,4,0,0,4,4,0,0,4,4,0,0,4,4,0,0,5,5,0,0,6,6,0,0,1394,94354,19408,0,1,4,2071942935888611,2072010719611712,2072010719613675,2071942936887318
63,"void at::native::reduce_kernel<512, 1, at::native::ReduceOp<float, at::native::MeanOps<float, float, float, float>, unsigned int, float, 4, 4> >(at::native::ReduceOp<float, at::native::MeanOps<float, float, float, float>, unsigned int, float, 4, 4>) [clone .kd]",2,0,171,1928,1928,155648,512,2560,48,28,4,80,64,0x0,0x7128f4d17880,35007,218862,17525520,3837074,1819959,0,0,0,0.0,0.0,0.0,267654.0,0.0,0.0,0.0,267654.0,137104,132192,32,0,137581,132517,32,152,136592,131712,0,0,136962,132058,24,0,136938,132058,0,0,137020,132140,0,0,136970,132058,32,0,136964,132052,32,0,137108,132196,32,0,137582,132518,32,152,136594,131714,0,0,136962,132058,24,0,136933,132053,0,0,137024,132143,1,0,136974,132062,32,0,136961,132049,32,0,1233,1645137,45436,0,304,2432,2071942936872015,2072010719618122,2072010719715386,2071942937871212
64,__amd_rocclr_copyBuffer.kd,2,0,172,1928,1928,512,512,0,0,16,0,32,64,0x0,0x71612802ba80,16,116,9408,299,65,0,0,0,0.0,0.0,0.0,8.0,0.0,0.0,0.0,8.0,4,4,0,0,10,10,0,0,0,0,0,0,0,0,0,0,5,5,0,0,5,5,0,0,9,9,0,0,9,9,0,0,1,1,0,0,6,6,0,0,4,0,4,0,1,1,0,0,0,0,0,0,1,1,0,0,7,7,0,0,4,4,0,0,1441,112523,27136,0,1,8,2071942937430891,2072010719715386,2072010719719472,2071942938693168
65,"void at::native::vectorized_elementwise_kernel<4, at::native::compare_scalar_kernel<float>(at::TensorIteratorBase&, at::native::(anonymous namespace)::OpType, float)::{lambda(float)#1}, std::array<char*, 2ul> >(int, at::native::compare_scalar_kernel<float>(at::TensorIteratorBase&, at::native::(anonymous namespace)::OpType, float)::{lambda(float)#1}, std::array<char*, 2ul>) [clone .kd]",2,0,174,1928,1928,4194304,256,0,0,24,0,64,64,0x0,0x7128816314c0,65536,192868,15369216,22151168,3473408,0,0,0,0.0,0.0,3103.0,524288.0,0.0,0.0,0.0,524288.0,196928,131392,65536,0,196936,131400,65536,0,197332,131796,65536,0,197019,131483,65536,0,197275,131739,65536,0,197283,131747,65536,0,197284,131748,65536,0,197262,131726,65536,0,196928,131392,65536,0,196937,131401,65536,0,197332,131796,65536,0,197022,131486,65536,0,197273,131737,65536,0,197281,131745,65536,0,197285,131749,65536,0,197260,131724,65536,0,1186,1097970,17101,0,16384,65536,2071942939212015,2072010719749196,2072010719811688,2071942940243731
66,"void at::native::elementwise_kernel<512, 1, at::native::gpu_kernel_impl<at::native::direct_copy_kernel_cuda(at::TensorIteratorBase&)::{lambda()#3}::operator()() const::{lambda()#4}::operator()() const::{lambda(long)#1}>(at::TensorIteratorBase&, at::native::direct_copy_kernel_cuda(at::TensorIteratorBase&)::{lambda()#3}::operator()() const::{lambda()#4}::operator()() const::{lambda(long)#1} const&)::{lambda(int)#1}>(int, at::native::gpu_kernel_impl<at::native::direct_copy_kernel_cuda(at::TensorIteratorBase&)::{lambda()#3}::operator()() const::{lambda()#4}::operator()() const::{lambda(long)#1}>(at::TensorIteratorBase&, at::native::direct_copy_kernel_cuda(at::TensorIteratorBase&)::{lambda()#3}::operator()() const::{lambda()#4}::operator()() const::{lambda(long)#1} const&)::{lambda(int)#1}) [clone .kd]",2,0,175,1928,1928,67108864,512,0,0,12,4,32,64,0x0,0x7128a306e700,4194304,4135012,330876616,93323264,31457280,0,0,0,0.0,0.0,20697.0,2097152.0,0.0,0.0,0.0,2097152.0,557969,33681,524288,0,557400,33112,524288,0,557402,33114,524288,0,557522,33234,524288,0,558048,33760,524288,0,558134,33846,524288,0,558373,34085,524288,0,558377,34089,524288,0,557968,33680,524288,0,557405,33117,524288,0,557409,33121,524288,0,557547,33259,524288,0,558050,33762,524288,0,558131,33843,524288,0,558370,34082,524288,0,558381,34093,524288,0,1406,3076504,135032,0,131072,1048576,2071942940221077,2072010719811688,2072010719999646,2071942941220355
67,__amd_rocclr_fillBufferAligned.kd,2,0,176,1928,1928,256,256,0,0,12,4,48,64,0x0,0x71612802ba00,8,80,6480,183,38,0,0,0,0.0,0.0,0.0,2.0,0.0,0.0,0.0,2.0,0,0,0,0,4,4,0,0,4,4,0,0,4,4,0,0,2,2,0,0,2,2,0,0,5,5,0,0,7,7,0,0,4,4,0,0,9,9,0,0,4,4,0,0,4,4,0,0,4,4,0,0,6,5,1,0,6,6,0,0,5,5,0,0,1417,187189,74185,0,1,4,2071942940779513,2072010719999646,2072010720004092,2071942942060347
68,"void at::native::reduce_kernel<512, 1, at::native::ReduceOp<long, at::native::func_wrapper_t<long, at::native::sum_functor<long, long, long>::operator()(at::TensorIterator&)::{lambda(long, long)#2}>, unsigned int, long, 4, 4> >(at::native::ReduceOp<long, at::native::func_wrapper_t<long, at::native::sum_functor<long, long, long>::operator()(at::TensorIterator&)::{lambda(long, long)#2}>, unsigned int, long, 4, 4>) [clone .kd]",2,0,177,1928,1928,155648,512,4608,80,36,4,80,64,0x0,0x71286102e7c0,35006,337606,27079688,5216087,2645406,0,0,0,0.0,0.0,0.0,529798.0,0.0,0.0,0.0,529798.0,268304,263392,32,0,268138,263226,32,0,268049,263145,24,0,268051,263139,32,0,268265,263385,0,0,268737,263705,0,152,268519,263623,16,0,268467,263571,16,0,268304,263392,32,0,268137,263225,32,0,268050,263146,24,0,268048,263136,32,0,268261,263381,0,0,268718,263685,1,152,268523,263627,16,0,268466,263570,16,0,1549,3434600,255663,0,304,2432,2071942941856025,2072010720004092,2072010720207473,2071942943022159
69,__amd_rocclr_copyBuffer.kd,2,0,178,1928,1928,512,512,0,0,16,0,32,64,0x0,0x71612802ba80,16,170,13408,351,65,0,0,0,0.0,0.0,0.0,16.0,0.0,0.0,0.0,16.0,12,4,8,0,8,8,0,0,0,0,0,0,0,0,0,0,4,4,0,0,5,5,0,0,8,8,0,0,8,8,0,0,0,0,0,0,5,5,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,7,7,0,0,4,4,0,0,1394,125940,18789,0,1,8,2071942942682336,2072010720207473,2072010720212240,2071942943936230
